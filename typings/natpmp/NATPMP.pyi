"""
This type stub file was generated by pyright.
"""

import socket

__version__ = ...
__license__ = ...
__author__ = ...

NATPMP_PORT: int = ...
NATPMP_RESERVED_VAL: int = ...
NATPMP_PROTOCOL_UDP: int = ...
NATPMP_PROTOCOL_TCP: int = ...
NATPMP_GATEWAY_NO_VALID_GATEWAY: int = ...
NATPMP_GATEWAY_NO_SUPPORT: int = ...
NATPMP_GATEWAY_CANNOT_FIND: int = ...
NATPMP_RESULT_SUCCESS: int = ...
NATPMP_RESULT_UNSUPPORTED_VERSION: int = ...
NATPMP_RESULT_NOT_AUTHORIZED: int = ...
NATPMP_RESULT_NETWORK_FAILURE: int = ...
NATPMP_RESULT_OUT_OF_RESOURCES: int = ...
NATPMP_RESULT_UNSUPPORTED_OPERATION: int = ...
NATPMP_ERROR_DICT: dict[int, str] = ...

class NATPMPRequest:
    """Represents a basic NAT-PMP request.  This currently consists of the
    1-byte fields version and opcode.

    Other requests are derived from NATPMPRequest.
    """

    initial_timeout: int = ...
    def __init__(self, version: int, opcode: int) -> None: ...
    def toBytes(self) -> bytes:  # -> bytes:
        """Converts the request object to a byte string."""
        ...

class PublicAddressRequest(NATPMPRequest):
    """Represents a NAT-PMP request to the local gateway for a public address.
    As per the specification, this is a generic request with the opcode = 0.
    """

    def __init__(self, versio: int = ...) -> None: ...

class PortMapRequest(NATPMPRequest):
    """Represents a NAT-PMP request to the local gateway for a port mapping.
    As per the specification, this request extends NATPMPRequest with
    the fields private_port, public_port, and lifetime.  The first two
    are 2-byte unsigned shorts, and the last is a 4-byte unsigned integer.
    """

    private_port: int = ...
    public_port: int = ...
    lifetime: int = ...

    def __init__(
        self, protocol: int, private_port: int, public_port: int, lifetime: int = ..., version: int = ...
    ) -> None: ...
    def toBytes(self) -> bytes: ...

class NATPMPResponse:
    """Represents a generic NAT-PMP response from the local gateway.  The
    generic response has fields for version, opcode, result, and secs
    since last epoch (last boot of the NAT gateway).  As per the
    specification, the opcode is offset by 128 from the opcode of
    the original request.
    """

    version: int = ...
    opcode: int = ...
    result: int = ...
    sec_since_epoche: int = ...

    def __init__(self, version: int, opcode: int, result: int, sec_since_epoch: int) -> None: ...
    def is_successful(self) -> bool: ...
    def __str__(self) -> str: ...

class PublicAddressResponse(NATPMPResponse):
    """Represents a NAT-PMP response from the local gateway to a
    public-address request.  It has one additional 4-byte field
    containing the IP returned.

    The member variable ip contains the Python-friendly string form, while
    ip_int contains the same in the original 4-byte unsigned int.
    """

    def __init__(self, data: bytes) -> None: ...
    def __str__(self) -> str: ...

class PortMapResponse(NATPMPResponse):
    """Represents a NAT-PMP response from the local gateway to a
    public-address request.  The response contains the private port,
    public port, and the lifetime of the mapping in addition to typical
    NAT-PMP headers.  Note that the port mapping assigned is
    NOT NECESSARILY the port requested (see the specification
    for details).
    """

    private_port: int = ...
    public_port: int = ...
    lifetime: int = ...

    def __init__(self, data: bytes) -> None: ...
    def __str__(self) -> str: ...

class NATPMPError(Exception):
    """Generic exception state.  May be used to represent unknown errors."""

    ...

class NATPMPResultError(NATPMPError):
    """Used when a NAT gateway responds with an error-state response."""

    ...

class NATPMPNetworkError(NATPMPError):
    """Used when a network error occurred while communicating
    with the NAT gateway."""

    ...

class NATPMPUnsupportedError(NATPMPError):
    """Used when a NAT gateway does not support NAT-PMP."""

    ...

def get_gateway_addr() -> str:
    """Use netifaces to get the gateway address, if we can't import it then
       fall back to a hack to obtain the current gateway automatically, since
       Python has no interface to sysctl().

       This may or may not be the gateway we should be contacting.
       It does not guarantee correct results.

       This function requires the presence of netstat on the path on POSIX
    and NT.
    """
    ...

def error_str(result_code: int) -> str:
    """Takes a numerical error code and returns a human-readable
    error string.
    """
    ...

def get_gateway_socket(gateway: str) -> socket.socket:
    """Takes a gateway address string and returns a non-blocking UDP
    socket to communicate with its NAT-PMP implementation on
    NATPMP_PORT.

    e.g. addr = get_gateway_socket('10.0.1.1')
    """
    ...

def get_public_address(gateway_ip: str | None = ..., retry: int = ...) -> str:
    """A high-level function that returns the public interface IP of
    the current host by querying the NAT-PMP gateway.  IP is
    returned as string.

    Takes two possible keyword arguments:
         gateway_ip - the IP to the NAT-PMP compatible gateway.
                      Defaults to using auto-detection function
                      get_gateway_addr()
         retry - the number of times to retry the request if unsuccessful.
                 Defaults to 9 as per specification.
    """
    ...

def map_tcp_port(
    public_port: int,
    private_port: int,
    lifetime: int = ...,
    gateway_ip: None | str = ...,
    retry: int = ...,
    use_exception: bool = ...,
) -> PortMapResponse:
    """A high-level wrapper to map_port() that requests a mapping
    for a public TCP port on the NAT to a private TCP port on this host.
    Returns the complete response on success.

         public_port - the public port of the mapping requested
         private_port - the private port of the mapping requested
         lifetime - the duration of the mapping in seconds.
                    Defaults to 3600, per specification.
         gateway_ip - the IP to the NAT-PMP compatible gateway.
                     Defaults to using auto-detection function
                     get_gateway_addr()
         retry - the number of times to retry the request if unsuccessful.
                 Defaults to 9 as per specification.
         use_exception - throw an exception if an error result is
                        received from the gateway.  Defaults to True.
    """
    ...

def map_udp_port(
    public_port: int,
    private_port: int,
    lifetime: int = ...,
    gateway_ip: str | None = ...,
    retry: int = ...,
    use_exception: bool = ...,
) -> PortMapResponse:
    """A high-level wrapper to map_port() that requests a mapping for
    a public UDP port on the NAT to a private UDP port on this host.
    Returns the complete response on success.

         public_port - the public port of the mapping requested
         private_port - the private port of the mapping requested
         lifetime - the duration of the mapping in seconds.
                    Defaults to 3600, per specification.
         gateway_ip - the IP to the NAT-PMP compatible gateway.
                      Defaults to using auto-detection function
                      get_gateway_addr()
         retry - the number of times to retry the request if unsuccessful.
                 Defaults to 9 as per specification.
         use_exception - throw an exception if an error result is
                         received from the gateway.  Defaults to True.
    """
    ...

def map_port(
    protocol: int,
    public_port: int,
    private_port: int,
    lifetime: int = ...,
    gateway_ip: str | None = ...,
    retry: int = ...,
    use_exception: bool = ...,
) -> PortMapResponse:
    """A function to map public_port to private_port of protocol.
    Returns the complete response on success.

         protocol - NATPMP_PROTOCOL_UDP or NATPMP_PROTOCOL_TCP
         public_port - the public port of the mapping requested
         private_port - the private port of the mapping requested
         lifetime - the duration of the mapping in seconds.
                    Defaults to 3600, per specification.
         gateway_ip - the IP to the NAT-PMP compatible gateway.
                      Defaults to using auto-detection function
                      get_gateway_addr()
         retry - the number of times to retry the request if unsuccessful.
                 Defaults to 9 as per specification.
         use_exception - throw an exception if an error result
                         is received from the gateway.  Defaults to True.
    """
    ...

def send_request(gateway_socket: socket.socket, request: NATPMPRequest) -> None: ...
def read_response(
    gateway_socket: socket.socket, timeout: int, response_size: int = ...
) -> tuple[None, None] | tuple[bytes, str]: ...
def send_request_with_retry(
    gateway_ip: str,
    request: PortMapRequest,
    response_data_class: PortMapResponse = ...,
    retry: int = ...,
    response_size: int = ...,
) -> PortMapResponse: ...

class NatPMP:
    def __init__(self, interface: str = ...) -> None: ...
    def forward_port(self, proto: str, src_port: int, dest_ip: None, dest_port: int = ...) -> PortMapResponse: ...

if __name__ == "__main__":
    ...
